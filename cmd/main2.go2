package cmd

import (
	"errors"
	"fmt"
	"github.com/atc0005/go-nagios"
	g "github.com/gosnmp/gosnmp"
	"github.com/spf13/cobra"
	_ "github.com/spf13/cobra"
	"log"
	"strconv"
)

var rootCmd = &cobra.Command{
	Use:   "snmpNagios",
	Short: "A brief description of your application",
	Long: `A longer description that spans multiple lines and likely contains
examples and usage of using your application. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
	// Uncomment the following line if your bare application
	// has an action associated with it:
	Version: "0.1.0",
	//Args:    cobra.MinimumNArgs(2),
	Run: func(cmd *cobra.Command, args []string) {
		println(cmd.Flags().Lookup("snmpversion").Value.String())
		run(cmd)
	},
}

func init() {
	// Here you will define your flags and configuration settings.
	// Cobra supports persistent flags, which, if defined here,
	// will be global for your application.

	// rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.snmpNagios.yaml)")

	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	rootCmd.Flags().BoolP("help", "h", false, "Help message for toggle")
	rootCmd.Flags().BoolP("version", "V", false, "display the version of snmpNagios")
	rootCmd.Flags().StringP("snmpversion", "v", "3", "specify the version of SNMP to use")
	rootCmd.Flags().StringP("community", "c", "", "set community string")
	rootCmd.Flags().StringP("authprot", "a", "", "set authentication protocol (MD5|SHA)")
	rootCmd.Flags().StringP("authpass", "A", "", "set authentication password")
	rootCmd.Flags().StringP("username", "u", "", "set username")
	rootCmd.Flags().StringP("privprot", "x", "", "set privacy protocol (DES|AES)")
	rootCmd.Flags().StringP("privpass", "X", "", "set privacy password")
	rootCmd.Flags().StringP("hostname", "H", "localhost", "set Hostname to use")
}

func run(cmd *cobra.Command) {
	var plugin = nagios.NewPlugin()
	defer plugin.ReturnCheckResults()
	perfdata := nagios.PerformanceData{
		Label:             "myperf",
		Value:             "",
		UnitOfMeasurement: "",
		Warn:              "",
		Crit:              "",
		Min:               "",
		Max:               "",
	}
	_ = plugin.AddPerfData(true, perfdata)
	hostname := cmd.Flags().Lookup("hostname").Value.String()
	community := cmd.Flags().Lookup("community").Value.String()
	if community != "" {
		g.Default.Community = community
		g.Default.Version = g.Version2c
	} else {
		authprot := cmd.Flags().Lookup("authprot").Value.String()
		authpass := cmd.Flags().Lookup("authpass").Value.String()
		username := cmd.Flags().Lookup("username").Value.String()
		privprot := cmd.Flags().Lookup("privprot").Value.String()
		privpass := cmd.Flags().Lookup("privpass").Value.String()

		println(username, authprot, authpass, privprot, privpass, getAuthProto(authprot))

		g.Default.SecurityParameters = &g.UsmSecurityParameters{
			UserName:                 username,
			AuthenticationProtocol:   getAuthProto(authprot),
			PrivacyProtocol:          getPrivProto(privprot),
			AuthenticationPassphrase: authpass,
			PrivacyPassphrase:        privpass,
		}
		g.Default.Version = g.Version3
		g.Default.MsgFlags = g.AuthPriv
		g.Default.SecurityModel = g.UserSecurityModel
	}
	// Default is a pointer to a GoSNMP struct that contains sensible defaults
	// eg port 161, community public, etc
	g.Default.Target = hostname

	oids := []string{"1.3.6.1.2.1.1.4.0", "1.3.6.1.2.1.1.7.0", "1.3.6.1.2.1.2.1", "1.3.6.1.2.1.2.2.1.2.0.0.0"}
	result, err2 := g.Default.Get(oids) // Get() accepts up to g.MAX_OIDS
	println("maxoids", g.MaxOids)
	err3 := g.Default.BulkWalk("1.3.6.1.2.1.2.2.1", walkfunc)
	if err3 != nil {
		log.Fatal(err3)
	}
	err4 := g.Default.BulkWalk("1.3.6.1.2.1.31.1.1.1", walkfunc)
	if err4 != nil {
		log.Fatal(err3)
	}
	if err2 != nil {
		log.Fatalf("Get() err: %v", err2)
	}

	for i, variable := range result.Variables {
		fmt.Printf("%d: oid: %s ", i, variable.Name)

		// the Value of each variable returned by Get() implements
		// interface{}. You could do a type switch...
		switch variable.Type {
		case g.OctetString:
			bytes := variable.Value.([]byte)
			fmt.Printf("string: %s\n", string(bytes))
		case g.NoSuchObject:
			fmt.Printf("no such object\n")
		case g.NoSuchInstance:
			fmt.Printf("no such instance\n")
		default:
			// ... or often you're just interested in numeric values.
			// ToBigInt() will return the Value as a BigInt, for plugging
			// into your calculations.
			fmt.Printf("number: %d\n", g.ToBigInt(variable.Value))
		}
	}
}

func walkfunc(unit g.SnmpPDU) error {
	switch unit.Type {
	case g.EndOfContents:

		err := errors.New("End of Contents")
		return err
	case g.Boolean:
		fmt.Printf("%s string: %s\n", unit.Name, strconv.FormatBool(unit.Value.(bool)))
	case g.OctetString:
		bytes := unit.Value.([]byte)
		fmt.Printf("%s string: %s\n", unit.Name, string(bytes))
	default:
		fmt.Printf("%s int: %s\n", unit.Name, g.ToBigInt(unit.Value))
	}
	return nil
}

func main() {
	_ = rootCmd.Execute()
	//if cmderr != nil {
	//	os.Exit(1)
	//}

}
